{"version":3,"sources":["serviceWorker.ts","Form.tsx","App.tsx","index.tsx"],"names":["config","Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","apiAddress","apiAddressIsLive","state","firstName","lastName","awaitingRequests","onSubmit","bind","assertThisInitialized","setValue","trySendAgain","setInterval","_this2","offlineRequests","localStorage","getItem","requestsArray","JSON","parse","requestsCopy","fetch","then","ready","forEach","e","i","method","body","stringify","title","success","console","log","alert","splice","setItem","setState","length","_this3","catch","failure","newOfflineRequests","push","fieldName","value","ns","forceUpdate","_this4","react_default","a","createElement","Stack","horizontalAlign","verticalAlign","verticalFill","styles","root","width","margin","textAlign","color","gap","TextField","label","required","onChange","v","DefaultButton","text","allowDisabledFocus","onClick","Text","React","Component","FontWeights","semibold","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","mergeStyles","selectors",":global(body), :global(html), :global(#root)","padding","height","ReactDOM","render","Customizer","FluentCustomizations","Form_Form","document","getElementById","URL","process","href","addEventListener","concat","response","contentType","headers","get","status","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.65cdb187.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\n\r\n\r\n \r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if ((process.env.NODE_ENV === 'production' || process.env.NODE_ENV === 'development') && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    /*if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }*/\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n              \r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        console.log(\"No service worker found. Probably a different app. Reload the page.\");\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      ); \r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n ","import { ReactComponent } from \"*.svg\";\r\nimport React from \"react\";\r\nimport { Stack, TextField, PrimaryButton, Button, DefaultButton, Text } from \"office-ui-fabric-react\";\r\n\r\nexport default class Form extends React.Component<any,any>{ \r\n\r\n    apiAddress = \"https://jsonplaceholder.typicode.com/posts\";\r\n    apiAddressIsLive = \"https://jsonplaceholder.typicode.com\";\r\n\r\n    constructor(props:any){\r\n        super(props);\r\n        this.state={ \r\n            firstName:\"\",\r\n            lastName:\"\",\r\n            awaitingRequests:0,\r\n        };\r\n\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.setValue = this.setValue.bind(this); \r\n        this.trySendAgain = this.trySendAgain.bind(this);\r\n\r\n        setInterval(this.trySendAgain, 10000);\r\n    }    \r\n \r\n    trySendAgain(){\r\n        let offlineRequests = localStorage.getItem(\"offlineRequests\");\r\n\r\n        if(offlineRequests!=null){\r\n            let requestsArray:any[] = JSON.parse(offlineRequests);\r\n            let requestsCopy = requestsArray;\r\n            \r\n            fetch(this.apiAddressIsLive).then(ready=>{                            \r\n                requestsArray.forEach((e, i) => {\r\n                    fetch(this.apiAddress, {\r\n                        method: \"POST\",\r\n                        body: JSON.stringify({\r\n                            title: e.firstName,\r\n                            body: e.lastName\r\n                        }),\r\n                    }).then(success=>{\r\n                        console.log('success',success);\r\n                        alert(\"Offline request has been sent\");\r\n                        requestsCopy.splice(i,1);\r\n                        localStorage.setItem(\"offlineRequests\", JSON.stringify(requestsCopy))\r\n                        this.setState({awaitingRequests:requestsCopy.length});\r\n                    });\r\n                });\r\n            })\r\n \r\n        }\r\n    }\r\n\r\n    onSubmit(){\r\n        console.log(this.state);\r\n        fetch(this.apiAddress, {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                title: this.state.firstName,\r\n                body: this.state.lastName\r\n            }),\r\n        }).then(success=>{\r\n            console.log('success',success);\r\n            alert(\"Request has been sent\");\r\n        }).catch(failure=>{\r\n            console.log('failure',failure);\r\n            let offlineRequests = localStorage.getItem(\"offlineRequests\");\r\n            let newOfflineRequests = null;\r\n\r\n            if(offlineRequests == null){ \r\n                newOfflineRequests = [this.state]; \r\n            } else {\r\n                newOfflineRequests = JSON.parse(offlineRequests);\r\n                newOfflineRequests.push(this.state);\r\n            }  \r\n            localStorage.setItem(\"offlineRequests\",JSON.stringify(newOfflineRequests));\r\n            this.setState({awaitingRequests:newOfflineRequests.length});\r\n        });\r\n    }\r\n\r\n    setValue(fieldName:string, value:any){\r\n        let ns = this.state as any;\r\n        ns[fieldName] = value;\r\n        this.setState(ns, this.forceUpdate);\r\n    }\r\n\r\n    public render(): React.ReactElement<any> {\r\n        return (\r\n            <Stack\r\n                horizontalAlign=\"center\"\r\n                verticalAlign=\"start\"\r\n                verticalFill\r\n                styles={{\r\n                    root: {\r\n                        width: '960px',\r\n                        margin: '0 auto',\r\n                        textAlign: 'center',\r\n                        color: '#605e5c'\r\n                    }\r\n                }}\r\n                gap={15}               \r\n            >                \r\n                <TextField \r\n                    label=\"First name\" \r\n                    required={true}\r\n                    value={this.state.firstName}\r\n                    onChange={(e,v)=>{this.setValue(\"firstName\",v)}}/>\r\n                <TextField \r\n                    label=\"Last name\" \r\n                    required={true}\r\n                    value={this.state.lastName}\r\n                    onChange={(e,v)=>{this.setValue(\"lastName\",v)}}/>\r\n                <DefaultButton                  \r\n                    text=\"Submit\" \r\n                    allowDisabledFocus\r\n                    onClick={this.onSubmit} />\r\n                <Text>Awaiting offline requests: {this.state.awaitingRequests}</Text> \r\n            </Stack>);\r\n    }\r\n\r\n}","import React from 'react';\r\nimport { Stack, Text, Link, FontWeights } from 'office-ui-fabric-react';\r\nimport Form from './Form';\r\n\r\nconst boldStyle = { root: { fontWeight: FontWeights.semibold } };\r\n\r\n\r\nexport const App: React.FunctionComponent = () => {\r\n  return (\r\n    <Form />\r\n  );\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\nimport { FluentCustomizations } from '@uifabric/fluent-theme';\r\nimport { Customizer, mergeStyles } from 'office-ui-fabric-react';\r\nimport * as serviceWorker from './serviceWorker'; \r\n\r\n// Inject some global styles\r\nmergeStyles({\r\n  selectors: {\r\n    ':global(body), :global(html), :global(#root)': {\r\n      margin: 0,\r\n      padding: 0,\r\n      height: '100vh'\r\n    }\r\n  }\r\n});\r\n\r\nReactDOM.render(\r\n  <Customizer {...FluentCustomizations}>\r\n    <App />\r\n  </Customizer>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n\r\n"],"sourceRoot":""}